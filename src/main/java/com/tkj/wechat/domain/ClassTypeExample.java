package com.tkj.wechat.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class ClassTypeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected Integer rows;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample page(Integer page, Integer pageSize) {
        this.offset = page * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        ClassTypeExample example = new ClassTypeExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public ClassTypeExample distinct(boolean distinct) {
        this.setDistinct(distinct);
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table class_type
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTypeNameIsNull() {
            addCriterion("type_name is null");
            return (Criteria) this;
        }

        public Criteria andTypeNameIsNotNull() {
            addCriterion("type_name is not null");
            return (Criteria) this;
        }

        public Criteria andTypeNameEqualTo(String value) {
            addCriterion("type_name =", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameNotEqualTo(String value) {
            addCriterion("type_name <>", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThan(String value) {
            addCriterion("type_name >", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThanOrEqualTo(String value) {
            addCriterion("type_name >=", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThan(String value) {
            addCriterion("type_name <", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThanOrEqualTo(String value) {
            addCriterion("type_name <=", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("type_name <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTypeNameLike(String value) {
            addCriterion("type_name like", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotLike(String value) {
            addCriterion("type_name not like", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameIn(List<String> values) {
            addCriterion("type_name in", values, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotIn(List<String> values) {
            addCriterion("type_name not in", values, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameBetween(String value1, String value2) {
            addCriterion("type_name between", value1, value2, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotBetween(String value1, String value2) {
            addCriterion("type_name not between", value1, value2, "typeName");
            return (Criteria) this;
        }

        public Criteria andMinCapacityIsNull() {
            addCriterion("min_capacity is null");
            return (Criteria) this;
        }

        public Criteria andMinCapacityIsNotNull() {
            addCriterion("min_capacity is not null");
            return (Criteria) this;
        }

        public Criteria andMinCapacityEqualTo(Integer value) {
            addCriterion("min_capacity =", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityNotEqualTo(Integer value) {
            addCriterion("min_capacity <>", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityGreaterThan(Integer value) {
            addCriterion("min_capacity >", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityGreaterThanOrEqualTo(Integer value) {
            addCriterion("min_capacity >=", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityLessThan(Integer value) {
            addCriterion("min_capacity <", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityLessThanOrEqualTo(Integer value) {
            addCriterion("min_capacity <=", value, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_capacity <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinCapacityIn(List<Integer> values) {
            addCriterion("min_capacity in", values, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityNotIn(List<Integer> values) {
            addCriterion("min_capacity not in", values, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityBetween(Integer value1, Integer value2) {
            addCriterion("min_capacity between", value1, value2, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMinCapacityNotBetween(Integer value1, Integer value2) {
            addCriterion("min_capacity not between", value1, value2, "minCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityIsNull() {
            addCriterion("max_capacity is null");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityIsNotNull() {
            addCriterion("max_capacity is not null");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityEqualTo(Integer value) {
            addCriterion("max_capacity =", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityNotEqualTo(Integer value) {
            addCriterion("max_capacity <>", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityGreaterThan(Integer value) {
            addCriterion("max_capacity >", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityGreaterThanOrEqualTo(Integer value) {
            addCriterion("max_capacity >=", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityLessThan(Integer value) {
            addCriterion("max_capacity <", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityLessThanOrEqualTo(Integer value) {
            addCriterion("max_capacity <=", value, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_capacity <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxCapacityIn(List<Integer> values) {
            addCriterion("max_capacity in", values, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityNotIn(List<Integer> values) {
            addCriterion("max_capacity not in", values, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityBetween(Integer value1, Integer value2) {
            addCriterion("max_capacity between", value1, value2, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMaxCapacityNotBetween(Integer value1, Integer value2) {
            addCriterion("max_capacity not between", value1, value2, "maxCapacity");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberIsNull() {
            addCriterion("min_lesson_number is null");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberIsNotNull() {
            addCriterion("min_lesson_number is not null");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberEqualTo(Integer value) {
            addCriterion("min_lesson_number =", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberNotEqualTo(Integer value) {
            addCriterion("min_lesson_number <>", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberGreaterThan(Integer value) {
            addCriterion("min_lesson_number >", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("min_lesson_number >=", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberLessThan(Integer value) {
            addCriterion("min_lesson_number <", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberLessThanOrEqualTo(Integer value) {
            addCriterion("min_lesson_number <=", value, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("min_lesson_number <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberIn(List<Integer> values) {
            addCriterion("min_lesson_number in", values, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberNotIn(List<Integer> values) {
            addCriterion("min_lesson_number not in", values, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberBetween(Integer value1, Integer value2) {
            addCriterion("min_lesson_number between", value1, value2, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMinLessonNumberNotBetween(Integer value1, Integer value2) {
            addCriterion("min_lesson_number not between", value1, value2, "minLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberIsNull() {
            addCriterion("max_lesson_number is null");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberIsNotNull() {
            addCriterion("max_lesson_number is not null");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberEqualTo(Integer value) {
            addCriterion("max_lesson_number =", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberNotEqualTo(Integer value) {
            addCriterion("max_lesson_number <>", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberGreaterThan(Integer value) {
            addCriterion("max_lesson_number >", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("max_lesson_number >=", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberLessThan(Integer value) {
            addCriterion("max_lesson_number <", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberLessThanOrEqualTo(Integer value) {
            addCriterion("max_lesson_number <=", value, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("max_lesson_number <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberIn(List<Integer> values) {
            addCriterion("max_lesson_number in", values, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberNotIn(List<Integer> values) {
            addCriterion("max_lesson_number not in", values, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberBetween(Integer value1, Integer value2) {
            addCriterion("max_lesson_number between", value1, value2, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andMaxLessonNumberNotBetween(Integer value1, Integer value2) {
            addCriterion("max_lesson_number not between", value1, value2, "maxLessonNumber");
            return (Criteria) this;
        }

        public Criteria andLessonPriceIsNull() {
            addCriterion("lesson_price is null");
            return (Criteria) this;
        }

        public Criteria andLessonPriceIsNotNull() {
            addCriterion("lesson_price is not null");
            return (Criteria) this;
        }

        public Criteria andLessonPriceEqualTo(BigDecimal value) {
            addCriterion("lesson_price =", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceNotEqualTo(BigDecimal value) {
            addCriterion("lesson_price <>", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceGreaterThan(BigDecimal value) {
            addCriterion("lesson_price >", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("lesson_price >=", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceLessThan(BigDecimal value) {
            addCriterion("lesson_price <", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceLessThanOrEqualTo(BigDecimal value) {
            addCriterion("lesson_price <=", value, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("lesson_price <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLessonPriceIn(List<BigDecimal> values) {
            addCriterion("lesson_price in", values, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceNotIn(List<BigDecimal> values) {
            addCriterion("lesson_price not in", values, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("lesson_price between", value1, value2, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andLessonPriceNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("lesson_price not between", value1, value2, "lessonPrice");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNull() {
            addCriterion("is_delete is null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNotNull() {
            addCriterion("is_delete is not null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteEqualTo(Integer value) {
            addCriterion("is_delete =", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotEqualTo(Integer value) {
            addCriterion("is_delete <>", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThan(Integer value) {
            addCriterion("is_delete >", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanOrEqualTo(Integer value) {
            addCriterion("is_delete >=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThan(Integer value) {
            addCriterion("is_delete <", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanOrEqualTo(Integer value) {
            addCriterion("is_delete <=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanOrEqualToColumn(ClassType.Column column) {
            addCriterion(new StringBuilder("is_delete <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteIn(List<Integer> values) {
            addCriterion("is_delete in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotIn(List<Integer> values) {
            addCriterion("is_delete not in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteBetween(Integer value1, Integer value2) {
            addCriterion("is_delete between", value1, value2, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotBetween(Integer value1, Integer value2) {
            addCriterion("is_delete not between", value1, value2, "isDelete");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table class_type
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table class_type
         *
         * @mbg.generated
         */
        private ClassTypeExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        protected Criteria(ClassTypeExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        public ClassTypeExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        public Criteria andLogicalDeleted(boolean deleted) {
            return deleted ? andIsDeleteEqualTo(ClassType.IsDelete.IS_DELETED.value()) : andIsDeleteNotEqualTo(ClassType.IsDelete.IS_DELETED.value());
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table class_type
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table class_type
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table class_type
         *
         * @mbg.generated
         */
        void example(com.tkj.wechat.domain.ClassTypeExample example);
    }
}